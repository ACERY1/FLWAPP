'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _mockServer = require('./mock/mockServer.js');

var _mockServer2 = _interopRequireDefault(_mockServer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// mock数据服务

var HOST_URL = 'http://test.com'; // 根域名
var DEBUG = false; // debug模式
var SUPPORT_METHODS = ['GET', 'POST', 'PUT', 'DELETE']; // 支持的http方法

function argumentsErr() {
	throw new Error('[arguments missing]: check RURL & METHOD');
}

function methodErr() {
	throw new Error('[http method error]: check METHOD params in ajax');
}
/**
 * 将map对象转换为URL参数
 * @param dataObject
 * @example {a:1,b:2}
 * @return '?a=1&b=2'
 */
function createURLParamsByObject(dataObject) {
	var dataStr = '';
	Object.keys(dataObject).forEach(function (key) {
		dataStr += key + '=' + dataObject[key] + '&';
	});
	if (dataStr !== '') {
		dataStr = dataStr.substr(0, dataStr.lastIndexOf('&'));
		return '?' + dataStr;
	}
	return dataStr;
}

exports.default = function () {
	var rurl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : argumentsErr();
	var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : argumentsErr();
	var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { 'Content-Type': 'application/json' };

	if (!DEBUG) {
		var _method = method.toUpperCase();
		var _url = HOST_URL + rurl;
		if (SUPPORT_METHODS.indexOf(_method) === -1) {
			methodErr();
		}
		if (_method === 'GET') {
			if (data) {
				console.log('get');
				_url += createURLParamsByObject(data);
			}
			wx.request({
				url: _url,
				method: _method,
				header: headers,
				success: function success(res) {
					return Promise.resolve(res);
				},
				fail: function fail(err) {
					return Promise.reject(err);
				}
			});
		} else {
			wx.request({
				url: _url,
				method: _method,
				header: headers,
				data: data,
				success: function success(res) {
					return Promise.resolve(res);
				},
				fail: function fail(err) {
					return Promise.reject(err);
				}
			});
		}
	} else {
		console.log('[HTTP Request]: request interrupted by mockServer');
		return (0, _mockServer2.default)(rurl);
	}
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFqYXguanMiXSwibmFtZXMiOlsiSE9TVF9VUkwiLCJERUJVRyIsIlNVUFBPUlRfTUVUSE9EUyIsImFyZ3VtZW50c0VyciIsIkVycm9yIiwibWV0aG9kRXJyIiwiY3JlYXRlVVJMUGFyYW1zQnlPYmplY3QiLCJkYXRhT2JqZWN0IiwiZGF0YVN0ciIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5Iiwic3Vic3RyIiwibGFzdEluZGV4T2YiLCJydXJsIiwibWV0aG9kIiwiZGF0YSIsImhlYWRlcnMiLCJfbWV0aG9kIiwidG9VcHBlckNhc2UiLCJfdXJsIiwiaW5kZXhPZiIsImNvbnNvbGUiLCJsb2ciLCJ3eCIsInJlcXVlc3QiLCJ1cmwiLCJoZWFkZXIiLCJzdWNjZXNzIiwicmVzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJmYWlsIiwiZXJyIiwicmVqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7O0FBQThDOztBQUU5QyxJQUFNQSxXQUFXLGlCQUFqQixDLENBQW1DO0FBQ25DLElBQU1DLFFBQVEsS0FBZCxDLENBQW9CO0FBQ3BCLElBQU1DLGtCQUFrQixDQUFDLEtBQUQsRUFBUSxNQUFSLEVBQWdCLEtBQWhCLEVBQXVCLFFBQXZCLENBQXhCLEMsQ0FBeUQ7O0FBRXpELFNBQVNDLFlBQVQsR0FBeUI7QUFDeEIsT0FBTSxJQUFJQyxLQUFKLENBQVUsMENBQVYsQ0FBTjtBQUNBOztBQUVELFNBQVNDLFNBQVQsR0FBc0I7QUFDckIsT0FBTSxJQUFJRCxLQUFKLENBQVUsa0RBQVYsQ0FBTjtBQUNBO0FBQ0Q7Ozs7OztBQU1BLFNBQVNFLHVCQUFULENBQWtDQyxVQUFsQyxFQUE4QztBQUM3QyxLQUFJQyxVQUFVLEVBQWQ7QUFDQUMsUUFBT0MsSUFBUCxDQUFZSCxVQUFaLEVBQXdCSSxPQUF4QixDQUFnQyxlQUFPO0FBQ3RDSCxhQUFXSSxNQUFNLEdBQU4sR0FBWUwsV0FBV0ssR0FBWCxDQUFaLEdBQThCLEdBQXpDO0FBQ0EsRUFGRDtBQUdBLEtBQUlKLFlBQVksRUFBaEIsRUFBb0I7QUFDbkJBLFlBQVVBLFFBQVFLLE1BQVIsQ0FBZSxDQUFmLEVBQWtCTCxRQUFRTSxXQUFSLENBQW9CLEdBQXBCLENBQWxCLENBQVY7QUFDQSxTQUFPLE1BQU1OLE9BQWI7QUFDQTtBQUNELFFBQU9BLE9BQVA7QUFDQTs7a0JBRWMsWUFBaUg7QUFBQSxLQUFoSE8sSUFBZ0gsdUVBQXpHWixjQUF5RztBQUFBLEtBQXpGYSxNQUF5Rix1RUFBaEZiLGNBQWdGO0FBQUEsS0FBaEVjLElBQWdFLHVFQUF6RCxJQUF5RDtBQUFBLEtBQW5EQyxPQUFtRCx1RUFBekMsRUFBQyxnQkFBZ0Isa0JBQWpCLEVBQXlDOztBQUMvSCxLQUFJLENBQUNqQixLQUFMLEVBQVk7QUFDWCxNQUFJa0IsVUFBVUgsT0FBT0ksV0FBUCxFQUFkO0FBQ0EsTUFBSUMsT0FBT3JCLFdBQVdlLElBQXRCO0FBQ0EsTUFBSWIsZ0JBQWdCb0IsT0FBaEIsQ0FBd0JILE9BQXhCLE1BQXFDLENBQUMsQ0FBMUMsRUFBNkM7QUFDNUNkO0FBQ0E7QUFDRCxNQUFJYyxZQUFZLEtBQWhCLEVBQXVCO0FBQ3RCLE9BQUlGLElBQUosRUFBVTtBQUNUTSxZQUFRQyxHQUFSLENBQVksS0FBWjtBQUNBSCxZQUFRZix3QkFBd0JXLElBQXhCLENBQVI7QUFDQTtBQUNEUSxNQUFHQyxPQUFILENBQVc7QUFDVkMsU0FBS04sSUFESztBQUVWTCxZQUFRRyxPQUZFO0FBR1ZTLFlBQVFWLE9BSEU7QUFJVlcsYUFBUyxpQkFBVUMsR0FBVixFQUFlO0FBQ3ZCLFlBQU9DLFFBQVFDLE9BQVIsQ0FBZ0JGLEdBQWhCLENBQVA7QUFDQSxLQU5TO0FBT1ZHLFVBQU0sY0FBVUMsR0FBVixFQUFlO0FBQ3BCLFlBQU9ILFFBQVFJLE1BQVIsQ0FBZUQsR0FBZixDQUFQO0FBQ0E7QUFUUyxJQUFYO0FBV0EsR0FoQkQsTUFnQk87QUFDTlQsTUFBR0MsT0FBSCxDQUFXO0FBQ1ZDLFNBQUtOLElBREs7QUFFVkwsWUFBUUcsT0FGRTtBQUdWUyxZQUFRVixPQUhFO0FBSVZELFVBQU1BLElBSkk7QUFLVlksYUFBUyxpQkFBVUMsR0FBVixFQUFlO0FBQ3ZCLFlBQU9DLFFBQVFDLE9BQVIsQ0FBZ0JGLEdBQWhCLENBQVA7QUFDQSxLQVBTO0FBUVZHLFVBQU0sY0FBVUMsR0FBVixFQUFlO0FBQ3BCLFlBQU9ILFFBQVFJLE1BQVIsQ0FBZUQsR0FBZixDQUFQO0FBQ0E7QUFWUyxJQUFYO0FBWUE7QUFDRCxFQXBDRCxNQW9DTztBQUNOWCxVQUFRQyxHQUFSLENBQVksbURBQVo7QUFDQSxTQUFPLDBCQUFXVCxJQUFYLENBQVA7QUFDQTtBQUNELEMiLCJmaWxlIjoiYWpheC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNb2NrU2VydmVyIGZyb20gJy4vbW9jay9tb2NrU2VydmVyLmpzJyAvLyBtb2Nr5pWw5o2u5pyN5YqhXG5cbmNvbnN0IEhPU1RfVVJMID0gJ2h0dHA6Ly90ZXN0LmNvbScgLy8g5qC55Z+f5ZCNXG5jb25zdCBERUJVRyA9IGZhbHNlIC8vIGRlYnVn5qih5byPXG5jb25zdCBTVVBQT1JUX01FVEhPRFMgPSBbJ0dFVCcsICdQT1NUJywgJ1BVVCcsICdERUxFVEUnXSAvLyDmlK/mjIHnmoRodHRw5pa55rOVXG5cbmZ1bmN0aW9uIGFyZ3VtZW50c0VyciAoKSB7XG5cdHRocm93IG5ldyBFcnJvcignW2FyZ3VtZW50cyBtaXNzaW5nXTogY2hlY2sgUlVSTCAmIE1FVEhPRCcpXG59XG5cbmZ1bmN0aW9uIG1ldGhvZEVyciAoKSB7XG5cdHRocm93IG5ldyBFcnJvcignW2h0dHAgbWV0aG9kIGVycm9yXTogY2hlY2sgTUVUSE9EIHBhcmFtcyBpbiBhamF4Jylcbn1cbi8qKlxuICog5bCGbWFw5a+56LGh6L2s5o2i5Li6VVJM5Y+C5pWwXG4gKiBAcGFyYW0gZGF0YU9iamVjdFxuICogQGV4YW1wbGUge2E6MSxiOjJ9XG4gKiBAcmV0dXJuICc/YT0xJmI9MidcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVVJMUGFyYW1zQnlPYmplY3QgKGRhdGFPYmplY3QpIHtcblx0bGV0IGRhdGFTdHIgPSAnJ1xuXHRPYmplY3Qua2V5cyhkYXRhT2JqZWN0KS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0ZGF0YVN0ciArPSBrZXkgKyAnPScgKyBkYXRhT2JqZWN0W2tleV0gKyAnJidcblx0fSlcblx0aWYgKGRhdGFTdHIgIT09ICcnKSB7XG5cdFx0ZGF0YVN0ciA9IGRhdGFTdHIuc3Vic3RyKDAsIGRhdGFTdHIubGFzdEluZGV4T2YoJyYnKSlcblx0XHRyZXR1cm4gJz8nICsgZGF0YVN0clxuXHR9XG5cdHJldHVybiBkYXRhU3RyXG59XG5cbmV4cG9ydCBkZWZhdWx0IChydXJsID0gYXJndW1lbnRzRXJyKCksIG1ldGhvZCA9IGFyZ3VtZW50c0VycigpLCBkYXRhID0gbnVsbCwgaGVhZGVycyA9IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfSkgPT4ge1xuXHRpZiAoIURFQlVHKSB7XG5cdFx0bGV0IF9tZXRob2QgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuXHRcdGxldCBfdXJsID0gSE9TVF9VUkwgKyBydXJsXG5cdFx0aWYgKFNVUFBPUlRfTUVUSE9EUy5pbmRleE9mKF9tZXRob2QpID09PSAtMSkge1xuXHRcdFx0bWV0aG9kRXJyKClcblx0XHR9XG5cdFx0aWYgKF9tZXRob2QgPT09ICdHRVQnKSB7XG5cdFx0XHRpZiAoZGF0YSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnZ2V0Jylcblx0XHRcdFx0X3VybCArPSBjcmVhdGVVUkxQYXJhbXNCeU9iamVjdChkYXRhKVxuXHRcdFx0fVxuXHRcdFx0d3gucmVxdWVzdCh7XG5cdFx0XHRcdHVybDogX3VybCxcblx0XHRcdFx0bWV0aG9kOiBfbWV0aG9kLFxuXHRcdFx0XHRoZWFkZXI6IGhlYWRlcnMsXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXMpIHtcblx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlcylcblx0XHRcdFx0fSxcblx0XHRcdFx0ZmFpbDogZnVuY3Rpb24gKGVycikge1xuXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0fSBlbHNlIHtcblx0XHRcdHd4LnJlcXVlc3Qoe1xuXHRcdFx0XHR1cmw6IF91cmwsXG5cdFx0XHRcdG1ldGhvZDogX21ldGhvZCxcblx0XHRcdFx0aGVhZGVyOiBoZWFkZXJzLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiAocmVzKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXMpXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGZhaWw6IGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKVxuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRjb25zb2xlLmxvZygnW0hUVFAgUmVxdWVzdF06IHJlcXVlc3QgaW50ZXJydXB0ZWQgYnkgbW9ja1NlcnZlcicpXG5cdFx0cmV0dXJuIE1vY2tTZXJ2ZXIocnVybClcblx0fVxufVxuIl19